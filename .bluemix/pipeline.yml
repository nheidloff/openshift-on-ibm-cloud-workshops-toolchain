---
  defaultBaseImageVersion: latest
  properties:
  - name: API_KEY
    value: ${API_KEY}
    type: secure
  - name: PROD_CLUSTER_NAME
    value: ${PROD_CLUSTER_NAME}
    type: text
  - name: PROD_REGION_ID
    value: ${PROD_REGION_ID}
    type: text
  stages:
  - name: FETCH
    inputs:
    - type: git
      branch: master
      service: ${GIT_REPO}    
    triggers:
    - type: commit
    properties:
    - name: IMAGE_NAME
      value: ${APP_NAME}
      type: text
    jobs:
    - name: Fetch code
      type: builder
      artifact_dir: ''
      build_type: shell
      script: |+
        #!/bin/bash
        # set -x
  
        # Git repo cloned at $WORKING_DIR, copy into $ARCHIVE_DIR
        mkdir -p $ARCHIVE_DIR
        cp -R -n ./ $ARCHIVE_DIR/ || true
  
        # Record git info
        echo "GIT_URL=${GIT_URL}" >> $ARCHIVE_DIR/build.properties
        echo "GIT_BRANCH=${GIT_BRANCH}" >> $ARCHIVE_DIR/build.properties
        echo "GIT_COMMIT=${GIT_COMMIT}" >> $ARCHIVE_DIR/build.properties
        echo "SOURCE_BUILD_NUMBER=${BUILD_NUMBER}" >> $ARCHIVE_DIR/build.properties
        cat $ARCHIVE_DIR/build.properties
  
        # check if doi is integrated in this toolchain
        if jq -e '.services[] | select(.service_id=="draservicebroker")' _toolchain.json; then
          # Record build information
          ibmcloud login --apikey ${IBM_CLOUD_API_KEY} --no-region
          ibmcloud doi publishbuildrecord --branch ${GIT_BRANCH} --repositoryurl ${GIT_URL} --commitid ${GIT_COMMIT} \
            --buildnumber ${BUILD_NUMBER} --logicalappname ${IMAGE_NAME} --status pass
        fi
  - name: CONTAINERIZE
    properties:
    - name: buildprops
      value: build.properties
      type: file
    - name: DOCKER_ROOT
      value: 2-deploying-to-openshift
      type: text
    - name: DOCKER_FILE
      value: Dockerfile
      type: text
    - name: PIPELINE_IMAGE_URL
      value: undefined
      type: text
    inputs:
    - type: job
      stage: FETCH
      job: Fetch code
    triggers:
    - type: stage
    jobs:
    - name: Build on OpenShift
      type: deployer
      build_type: kubernetes
      target:
        region_id: ${PROD_REGION_ID}
        api_key: ${API_KEY}
        kubernetes_cluster: ${PROD_CLUSTER_NAME}
      script: |-
        #!/bin/bash
        echo Start
        oc new-project cloud-native-starter || oc project cloud-native-starter;
        oc new-build --name authors --binary --strategy docker || oc start-build --name authors --binary --strategy docker
  - name: DEPLOY
    inputs:
    - type: job
      stage: CONTAINERIZE
      job: Build on OpenShift
    triggers:
    - type: stage
    jobs:
    - name: Build on OpenShift
--- 

